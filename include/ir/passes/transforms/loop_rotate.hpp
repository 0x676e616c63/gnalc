// Loop Rotate
//
// Rotate the loop body to the header.
// This pass first try merge the latch to the header, then rotate the loop if possible.
// Loops that:
//   - Simplified Form.
//   - Exactly one exit, and the exit is from the header.
//   - The only exit has the header as its only predecessor. (i.e. only header is exiting)
//   - The loop body (the header's non-exit successor) has the header as its only predecessor.
// can be rotated as the graph below.
//
//                    ---------------------
//                   |                    |
//                   v     (New Header)   |                          (New Header)
//  PreHeader ---> Header ---> Body ---> Latch    <to>    PreHeader ---> Body ---> Latch
//                  |                                         |           ^         |
//                  v                                         v           |         |
//                Exit                                       Exit  <-----------------
//
// Note that this implementation don't need the loop be in the LCSSA Form. And it does not
// preserve the LCSSA Form. But preserves the LoopSimplify Form.
//
// Warning:
// After rotation, the loop backedge becomes a critical edge.
//                                       (critical)
//                                      |----------|
//                                      |          |
//                                      V          |
//                    PreHeader ---> Header ---> Latch
//                        |                        |
//                        v                        |
//                       Exit  <--------------------
// Therefore, If loop rotation has been run before GVN-PRE, which requires critical edges been removed,
// the output loop might have exiting blocks in the middle of the loop, rather than exits in
// header (normal loop) or latch (normal rotated loop).
// For example,
//
//                                      |<-- bb0 <-|
//                                      |          |
//                                      V          |
//                    PreHeader ---> Header ---> Old Latch
//                        |                        |
//                        v                        |
//                       Exit  <--------------------
// The `bb0` block is generated by BreakCriticalEdgesPass that scheduled before GVN-PRE.
// The loop's latch is now `bb0`, but the loop's exiting block is still Old Latch,
// which is not a latch anymore. Thus, a middle exiting loop generated.
// Besides, in GVN-PRE's insertion phase (or PRE phase), instructions might be hoisted
// in `bb0`, which makes the `bb0` can not be eliminated by CFGSimplify.
//
// This means GVN-PRE performed on a rotated loop can (maybe always) let a loop become a
// middle exiting loop. This can prevent many loop pass to be performed, such as LoopUnroll.
#pragma once
#ifndef GNALC_IR_PASSES_TRANSFORMS_LOOP_ROTATE_HPP
#define GNALC_IR_PASSES_TRANSFORMS_LOOP_ROTATE_HPP

#include "ir/passes/pass_manager.hpp"

namespace IR {
class LoopRotatePass : public PM::PassInfo<LoopRotatePass> {
public:
    PM::PreservedAnalyses run(Function &function, FAM &manager);

private:
    size_t name_cnt = 0;
};

} // namespace IR
#endif
