; Module: ./test/contest/functional/66_exgcd.sy


define dso_local i32 @exgcd(i32 noundef %0, i32 noundef %1, i32* noundef %2, i32* noundef %3) {
4:
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 4
  store i32* %3, i32** %8, align 4
  %11 = load i32, i32* %6, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %19

13:
  %14 = load i32*, i32** %7, align 4
  %15 = getelementptr i32, i32* %14, i32 0
  store i32 1, i32* %15, align 4
  %16 = load i32*, i32** %8, align 4
  %17 = getelementptr i32, i32* %16, i32 0
  store i32 0, i32* %17, align 4
  %18 = load i32, i32* %5, align 4
  ret i32 %18

19:
  %20 = load i32, i32* %6, align 4
  %21 = load i32, i32* %5, align 4
  %22 = load i32, i32* %6, align 4
  %23 = srem i32 %21, %22
  %24 = load i32*, i32** %7, align 4
  %25 = load i32*, i32** %8, align 4
  %26 = call i32 @exgcd(i32 noundef %20, i32 noundef %23, i32* noundef %24, i32* noundef %25)
  store i32 %26, i32* %9, align 4
  %27 = load i32*, i32** %7, align 4
  %28 = getelementptr i32, i32* %27, i32 0
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %10, align 4
  %30 = load i32*, i32** %7, align 4
  %31 = getelementptr i32, i32* %30, i32 0
  %32 = load i32*, i32** %8, align 4
  %33 = getelementptr i32, i32* %32, i32 0
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %31, align 4
  %35 = load i32*, i32** %8, align 4
  %36 = getelementptr i32, i32* %35, i32 0
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* %6, align 4
  %40 = sdiv i32 %38, %39
  %41 = load i32*, i32** %8, align 4
  %42 = getelementptr i32, i32* %41, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = mul i32 %40, %43
  %45 = sub i32 %37, %44
  store i32 %45, i32* %36, align 4
  %46 = load i32, i32* %9, align 4
  ret i32 %46

}

define dso_local i32 @main() {
0:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [1 x i32], align 4
  %4 = alloca [1 x i32], align 4
  store i32 7, i32* %1, align 4
  store i32 15, i32* %2, align 4
  %5 = getelementptr [1 x i32], [1 x i32]* %3, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr [1 x i32], [1 x i32]* %4, i32 0, i32 0
  store i32 1, i32* %6, align 4
  %7 = load i32, i32* %1, align 4
  %8 = load i32, i32* %2, align 4
  %9 = getelementptr [1 x i32], [1 x i32]* %3, i32 0, i32 0
  %10 = getelementptr [1 x i32], [1 x i32]* %4, i32 0, i32 0
  %11 = call i32 @exgcd(i32 noundef %7, i32 noundef %8, i32* noundef %9, i32* noundef %10)
  %12 = getelementptr [1 x i32], [1 x i32]* %3, i32 0, i32 0
  %13 = getelementptr [1 x i32], [1 x i32]* %3, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* %2, align 4
  %16 = srem i32 %14, %15
  %17 = load i32, i32* %2, align 4
  %18 = add i32 %16, %17
  %19 = load i32, i32* %2, align 4
  %20 = srem i32 %18, %19
  store i32 %20, i32* %12, align 4
  %21 = getelementptr [1 x i32], [1 x i32]* %3, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  call void @putint(i32 noundef %22)
  ret i32 0

}

declare i32 @getint()
declare i32 @getch()
declare float @getfloat()
declare void @putint(i32 noundef)
declare void @putch(i32 noundef)
declare void @putfloat(float noundef)
declare void @_sysy_starttime(i32 noundef)
declare void @_sysy_stoptime(i32 noundef)
declare i32 @getarray(i32* noundef)
declare i32 @getfarray(float* noundef)
declare void @putarray(i32 noundef, i32* noundef)
declare void @putfarray(i32 noundef, float* noundef)
declare void @putf(i8* noundef, ...)
declare void @llvm.memset.p0i8.i32(i8* noundef, i8 noundef, i32 noundef, i1 noundef)
declare void @llvm.memcpy.p0.p0.i32(i8* noundef, i8* noundef, i32 noundef, i1 noundef)
